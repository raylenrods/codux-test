import { OrdinalColorScaleConfig } from '@nivo/colors';
import { ScalePoint } from '@nivo/scales';
import { Variable, VariableWithScale, CommonProps, ComputedDatum, BaseDatum, BaseGroup, CustomLayerProps, GroupLegend, DatumLegend, IfGrouped, ComputedGroupDatum } from './types';
export declare const useParallelCoordinates: <Datum extends BaseDatum, GroupBy extends Exclude<{ [K in keyof Datum]: Datum[K] extends string ? K : never; }[keyof Datum], "id"> | undefined = undefined>({ width, height, data, variables, groupBy, groups: predefinedGroups, layout, curve, colors, forwardLegendData, }: {
    width: number;
    height: number;
    data: readonly Datum[];
    variables: readonly Variable<Datum>[];
    groupBy?: GroupBy | undefined;
    groups?: IfGrouped<Datum, GroupBy, readonly BaseGroup[], never> | undefined;
    layout: "horizontal" | "vertical";
    curve: import("@nivo/core").LineCurveFactoryId;
    colors: OrdinalColorScaleConfig<IfGrouped<Datum, GroupBy, BaseGroup, Datum>>;
    forwardLegendData?: ((data: IfGrouped<Datum, GroupBy, GroupLegend[], DatumLegend<Datum>[]>) => void) | undefined;
}) => {
    variablesScale: ScalePoint<string>;
    variablesWithScale: readonly VariableWithScale<Datum>[];
    computedData: ComputedDatum<Datum>[] | ComputedGroupDatum<Datum>[];
    lineGenerator: import("d3-shape").Line<[number, number]>;
    legendData: GroupLegend[] | DatumLegend<Datum>[];
    customLayerContext: CustomLayerProps<Datum>;
};
//# sourceMappingURL=hooks.d.ts.map