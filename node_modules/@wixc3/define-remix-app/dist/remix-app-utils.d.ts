import { DynamicRoutePart, PathApi, RouteInfo, RoutingPattern, StaticRoutePart } from '@wixc3/app-core';
export interface RouteModuleInfo {
    id: string;
    path: string;
    file: string;
    exportNames: string[];
    children: RouteModuleInfo[];
}
export interface ParentLayoutWithExtra {
    layoutModule: string;
    layoutExportName: string;
    exportNames: string[];
    path: string;
    id: string;
}
export interface RouteExtraInfo {
    parentLayouts: Array<ParentLayoutWithExtra>;
    routeId: string;
    exportNames: string[];
}
export declare const routePartsToRoutePath: (routeParts: string[]) => (StaticRoutePart | DynamicRoutePart)[];
export declare function filePathToReadableUri(filePathInRouteDir: string, path: PathApi): string | null;
export declare function readableUriToFilePath(readableUri: string, path: PathApi, routeDir: string, routingPattern: RoutingPattern): string;
export declare const aRoute: (routeDirPath: string, path: RouteInfo["path"], parentLayouts: RouteInfo["parentLayouts"], pageModule: string, pathApi: PathApi, hasGetStaticRoutes: boolean) => RouteInfo<undefined>;
export declare const anErrorRoute: (routeDirPath: string, path: RouteInfo["path"], pageModule: string, parentLayouts: RouteInfo["parentLayouts"], pathApi: PathApi) => RouteInfo<undefined>;
export declare function filePathToURLParts(filePathInRouteDir: string, path: PathApi): string[];
export declare function filePathToLayoutMatching(filePathInRouteDir: string, path: PathApi): string[];
export declare function urlPartsToLayoutMatching(parts: string[]): string[];
/**
 * creates a routeId identical to remix routeIDs from a file path
 * @param appDir the root directory of the app
 * @param filePath the full path of the file
 * @returns
 */
export declare function filePathToRouteId(appDir: string, filePath: string): string;
/**
 * converts a path to a remix router url
 * @param path
 * @returns
 */
export declare function pathToRemixRouterUrl(path: RouteInfo['path']): string;
/**
 * creates a unique id for a route path for checing collisions
 * @param path
 * @returns
 */
export declare const routePathId: (path: RouteInfo["path"]) => string;
export declare function capitalizeFirstLetter(val: string): string;
export declare function toCamelCase(str: string): string;
/**
 * remix allows many files to define the same route, this function chooses the file that should be used
 * 1. prefers _index files over layout files i.e. product._index.tsx over product.tsx
 * 2. prefers /index.tsx over normal files i.e. product/index.tsx over product.tsx
 * 3. prefers /route.tsx over /index.tsx i.e. product/route.tsx over product/index.tsx
 * 4. prefers name_ files over name files i.e. abc_.product.tsx over abc.product.tsx
 * since in all cases it seems to return the longer file name, we can just return the longer file name
 */
export declare function chooseOverridingPath(fileA: string, fileB: string): string;
export declare function serializeRequest(request: Request): Promise<{
    url: string;
    method: string;
    headers: {
        key: string;
        value: string;
    }[];
    formData: {};
}>;
export declare function deserializeRequest(request: {
    url: string;
    method: string;
    headers: {
        key: string;
        value: string;
    }[];
    formData: {
        key: string;
        value: unknown;
    }[];
}): Request;
export interface SerializedRequest {
    url: string;
    method: string;
    headers: {
        key: string;
        value: string;
    }[];
    formData: {
        key: string;
        value: unknown;
    }[];
}
export interface DeserializedLoaderArgs {
    params: Record<string, string>;
    request: SerializedRequest;
}
export declare function serializeResponse(response: Response, headers?: {
    key: string;
    value: string;
}[]): Promise<SerializedResponse>;
export interface SerializedResponse {
    _serializedResponse: true;
    status: number;
    statusText: string;
    headers: {
        key: string;
        value: string;
    }[];
    body: string | null;
}
export declare function isSerializedResponse(response: unknown): response is SerializedResponse;
export declare const CoduxDeferredHeaderKey = "codux-remix-deferred";
export declare function deserializeResponse(response: SerializedResponse): Response;
//# sourceMappingURL=remix-app-utils.d.ts.map