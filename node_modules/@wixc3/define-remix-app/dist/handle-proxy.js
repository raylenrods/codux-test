"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHandleProxy = void 0;
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-explicit-any */
const createHandleProxy = () => {
    const lastLoadedHandleRef = { current: null };
    const handle = new Proxy({}, {
        get: (_, prop) => {
            var _a;
            return (_a = lastLoadedHandleRef.current) === null || _a === void 0 ? void 0 : _a[prop];
        },
        apply(_, thisArg, argArray) {
            var _a;
            return (_a = lastLoadedHandleRef.current) === null || _a === void 0 ? void 0 : _a.apply(thisArg, argArray);
        },
        construct(_, argArray) {
            return new lastLoadedHandleRef.current(...argArray);
        },
        defineProperty(_, property, attributes) {
            return Object.defineProperty(lastLoadedHandleRef.current, property, attributes);
        },
        deleteProperty(_, p) {
            return delete lastLoadedHandleRef.current[p];
        },
        getOwnPropertyDescriptor(_, p) {
            return Object.getOwnPropertyDescriptor(lastLoadedHandleRef.current, p);
        },
        getPrototypeOf(_) {
            return Object.getPrototypeOf(lastLoadedHandleRef.current);
        },
        has(_, p) {
            return p in lastLoadedHandleRef.current;
        },
        isExtensible(_) {
            return Object.isExtensible(lastLoadedHandleRef.current);
        },
        ownKeys(_) {
            return Object.keys(lastLoadedHandleRef.current);
        },
        preventExtensions(_) {
            return Object.preventExtensions(lastLoadedHandleRef.current);
        },
        set(_, p, newValue) {
            lastLoadedHandleRef.current[p] = newValue;
            return true;
        },
        setPrototypeOf(_, v) {
            return Object.setPrototypeOf(lastLoadedHandleRef.current, v);
        },
    });
    return {
        handle,
        setHandle: (handle) => {
            lastLoadedHandleRef.current = handle;
        },
    };
};
exports.createHandleProxy = createHandleProxy;
//# sourceMappingURL=handle-proxy.js.map