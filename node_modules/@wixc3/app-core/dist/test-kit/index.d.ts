import type { IAppManifest, IReactApp } from '@wixc3/app-core';
import { IDirectoryContents } from '@file-services/types';
export interface AppDefDriverOptions<MANIFEST_EXTRA_DATA = unknown, ROUTE_EXTRA_DATAU = unknown> {
    app: IReactApp<MANIFEST_EXTRA_DATA, ROUTE_EXTRA_DATAU>;
    initialFiles: IDirectoryContents;
    evaluatedNodeModules: Record<string, unknown>;
    /**
     * @default '/app-def.ts'
     */
    appDefFilePath?: string;
    /**
     * @default '/'
     */
    projectPath?: string;
}
export declare class AppDefDriver<MANIFEST_EXTRA_DATA = unknown, ROUTE_EXTRA_DATA = unknown> {
    private options;
    private fs;
    private moduleSystem;
    private dirListeners;
    private manifestListeners;
    private fileListeners;
    private exportsListeners;
    private lastManifest;
    private disposeApp?;
    constructor(options: AppDefDriverOptions<MANIFEST_EXTRA_DATA, ROUTE_EXTRA_DATA>);
    init(): Promise<IAppManifest<MANIFEST_EXTRA_DATA, ROUTE_EXTRA_DATA>>;
    addOrUpdateFile(filePath: string, contents: string): void;
    getManifest(): IAppManifest<MANIFEST_EXTRA_DATA, ROUTE_EXTRA_DATA> | null;
    getNewPageInfo(requestedURI: string): {
        isValid: boolean;
        errorMessage?: string;
        warningMessage?: string;
        pageModule: string;
        newPageSourceCode: string;
        newPageRoute?: import("@wixc3/app-core").RouteInfo<ROUTE_EXTRA_DATA> | undefined;
        routingPattern?: import("@wixc3/app-core").RoutingPattern;
    };
    getMovePageInfo(movedFilePath: string, requestedURI: string): {
        isValid: boolean;
        errorMessage?: string;
        warningMessage?: string;
        pageModule: string;
        newPageRoute?: import("@wixc3/app-core").RouteInfo<ROUTE_EXTRA_DATA> | undefined;
        routingPattern?: import("@wixc3/app-core").RoutingPattern;
    };
    addManifestListener(cb: (manifest: IAppManifest<MANIFEST_EXTRA_DATA, ROUTE_EXTRA_DATA>) => void): void;
    removeManifestListener(cb: (manifest: IAppManifest<MANIFEST_EXTRA_DATA, ROUTE_EXTRA_DATA>) => void): void;
    private dispatchManifestUpdate;
    render({ uri, testAutoRerenderOnManifestUpdate, }?: {
        uri?: string;
        testAutoRerenderOnManifestUpdate?: boolean;
    }): Promise<{
        dispose: () => void;
        container: HTMLDivElement;
        rerender: ({ uri }?: {
            uri?: string;
        }) => Promise<() => void>;
    }>;
    dispose(): void;
    private fsApi;
    private importModule;
    private listNestedPaths;
}
//# sourceMappingURL=index.d.ts.map